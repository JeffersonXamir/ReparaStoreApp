// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReparaStoreApp.Data;

#nullable disable

namespace ReparaStoreApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250712064247_RestructuracionDefinicionTablas")]
    partial class RestructuracionDefinicionTablas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Cliente.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.ToTable("STO_Clientes", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Dispositivo.Dispositivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.ToTable("STO_Dispositivos", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Inventario.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("StockMaximo")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("STO_Inventario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = false,
                            Cantidad = 10,
                            ProductoId = 1,
                            StockMaximo = 0,
                            StockMinimo = 5
                        },
                        new
                        {
                            Id = 2,
                            Activo = false,
                            Cantidad = 15,
                            ProductoId = 2,
                            StockMaximo = 0,
                            StockMinimo = 5
                        });
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Inventario.ItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("TieneIVA")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.ToTable("STO_Items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Codigo = "PROD-001",
                            Descripcion = "",
                            FechaCreacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Pantalla iPhone X",
                            Nota = "",
                            Precio = 120.00m,
                            TieneIVA = true,
                            Tipo = "Producto",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Codigo = "PROD-002",
                            Descripcion = "",
                            FechaCreacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Batería Samsung S20",
                            Nota = "",
                            Precio = 45.00m,
                            TieneIVA = true,
                            Tipo = "Producto",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Codigo = "SERV-001",
                            Descripcion = "",
                            FechaCreacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Cambio de pantalla",
                            Nota = "",
                            Precio = 50.00m,
                            TieneIVA = true,
                            Tipo = "Servicio",
                            UsuarioCreadorId = 1
                        });
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Inventario.Kardex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("STO_Kardex", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.Params", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.ToTable("SYS_PARAMETROS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = false,
                            Code = "SYS-IVA",
                            FechaCreacion = new DateTime(2025, 7, 12, 6, 42, 46, 80, DateTimeKind.Utc).AddTicks(6123),
                            Name = "IVA para la venta",
                            Nota = "IVA para la venta",
                            UsuarioCreadorId = 1,
                            Valor = "15"
                        });
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SEC_ROLES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Acceso total al sistema",
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Manejo de transacciones financieras",
                            Name = "Cajero"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Reparación y mantenimiento",
                            Name = "Técnico"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Usuario final del sistema",
                            Name = "Cliente"
                        });
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SEC_USUARIOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "001",
                            CreatedAt = new DateTime(2025, 7, 12, 6, 42, 46, 80, DateTimeKind.Utc).AddTicks(5358),
                            Email = "admin@reparastore.com",
                            FirstName = "admin",
                            IsActive = true,
                            LastName = "admin",
                            Name = "admin",
                            Note = "Usuario Administrador",
                            PasswordHash = "$2a$11$OG51cr/x2bitWNHyBLZRN.kwpWzDJ/p7QB.2KDa1D/j33Cq/BBfiO",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SEC_USUARIO_ROLES", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Id = 0
                        });
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Store.Reparacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CajeroId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostoEstimado")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("CostoFinal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DispositivoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FacturaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaAprobacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaReparado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NotasIngreso")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("NotasReparado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TecnicoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioAprobacionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioReparadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CajeroId");

                    b.HasIndex("DispositivoId");

                    b.HasIndex("TecnicoId");

                    b.HasIndex("UsuarioAprobacionId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.HasIndex("UsuarioReparadoId");

                    b.ToTable("STO_Reparaciones", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Store.ReparacionDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ReparacionId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TasaIVA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalIVA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReparacionId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.ToTable("STO_Reparaciones_Dt", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Ventas.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ReparacionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Numero")
                        .IsUnique();

                    b.HasIndex("ReparacionId")
                        .IsUnique();

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("STO_Facturas", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Ventas.FacturaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TasaIVA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalIVA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEdicionId");

                    b.ToTable("STO_Facturas_Dt", (string)null);
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Cliente.Clientes", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Dispositivo.Dispositivos", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Cliente.Clientes", "Cliente")
                        .WithMany("Dispositivos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.Navigation("Cliente");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Inventario.Inventario", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Inventario.ItemEntity", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Inventario.ItemEntity", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Inventario.Kardex", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Inventario.ItemEntity", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.Params", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.UserRole", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Security.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Store.Reparacion", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "Cajero")
                        .WithMany()
                        .HasForeignKey("CajeroId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReparaStoreApp.Entities.Models.Dispositivo.Dispositivos", "Dispositivo")
                        .WithMany("Reparaciones")
                        .HasForeignKey("DispositivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "Tecnico")
                        .WithMany()
                        .HasForeignKey("TecnicoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioAprobacion")
                        .WithMany()
                        .HasForeignKey("UsuarioAprobacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioReparado")
                        .WithMany()
                        .HasForeignKey("UsuarioReparadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cajero");

                    b.Navigation("Dispositivo");

                    b.Navigation("Tecnico");

                    b.Navigation("UsuarioAprobacion");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");

                    b.Navigation("UsuarioReparado");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Store.ReparacionDetalle", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Inventario.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Store.Reparacion", "Reparacion")
                        .WithMany("Detalles")
                        .HasForeignKey("ReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.Navigation("Item");

                    b.Navigation("Reparacion");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Ventas.Factura", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Cliente.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Store.Reparacion", "Reparacion")
                        .WithOne("Factura")
                        .HasForeignKey("ReparaStoreApp.Entities.Models.Ventas.Factura", "ReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Reparacion");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Ventas.FacturaDetalle", b =>
                {
                    b.HasOne("ReparaStoreApp.Entities.Models.Ventas.Factura", "Factura")
                        .WithMany("Detalles")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Inventario.ItemEntity", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReparaStoreApp.Entities.Models.Security.User", "UsuarioEdicion")
                        .WithMany()
                        .HasForeignKey("UsuarioEdicionId");

                    b.Navigation("Factura");

                    b.Navigation("Producto");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEdicion");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Cliente.Clientes", b =>
                {
                    b.Navigation("Dispositivos");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Dispositivo.Dispositivos", b =>
                {
                    b.Navigation("Reparaciones");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Security.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Store.Reparacion", b =>
                {
                    b.Navigation("Detalles");

                    b.Navigation("Factura")
                        .IsRequired();
                });

            modelBuilder.Entity("ReparaStoreApp.Entities.Models.Ventas.Factura", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
